program = 
	[ define_block ]
	{ subroutine } ;
 
define_block =
	{ "const" ident "=" number endl }
	{ "dim" ident endl } ;

subroutine = 
	"sub" ident endl
	[ define_block ]
	{ statement endl }
	"end" "sub" endl ;
 
statement =
	ident "=" expression
	| "call" ident
	| "return"
	// | "begin" { endl statement } endl "end"
	| "if" condition "then" endl statement_block "end" "if"
	| "while" condition "do" endl statement_block "wend" 
	| "print" (ident | number) { ident | number } ;
	
statement_block =
	{ endl }
	{ statement endl } ;
 
condition =
	expression { ("="|"!="|"<"|"<="|">"|">=") expression } ;
 
expression = 
	["+"|"-"] term { ("+"|"-") term } ;
 
term = 
	factor { ("*"|"/") factor } ;
 
factor = 
	ident | number | "(" expression ")" ;

endl = 
	("\n"|";") { endl } ;
